{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","Component","Counter","this","props","children","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Counters","state","counters","handleIncrement","index","indexOf","setState","handleDelete","filter","c","handleReset","map","key","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAYeA,E,iLANP,OAAS,yBAAKC,UAAU,gCACxB,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,e,GAJaC,a,cCiCNC,E,iLAjCH,IAAD,OACP,OACE,6BACGC,KAAKC,MAAMC,SACZ,0BAAMN,UAAWI,KAAKG,mBAAoBH,KAAKI,eAC/C,4BACEC,QAAS,kBAAM,EAAKJ,MAAMK,YAAY,EAAKL,MAAMM,UACjDX,UAAU,4BAFZ,aAMA,4BAAQS,QAAS,kBAAM,EAAKJ,MAAMO,SAAS,EAAKP,MAAMM,QAAQE,KAAKb,UAAU,2CAA7E,a,wCAWJ,IAAIc,EAAU,mBAEd,OADAA,GAAwC,IAA7BV,KAAKC,MAAMM,QAAQI,MAAc,UAAY,Y,oCAI3C,IACLA,EAAUX,KAAKC,MAAMM,QAArBI,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GA9BZb,aCuDPc,E,2MArDbC,MAAQ,CACNC,SAAU,CACR,CAAEL,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,K,EAGpBI,gBAAkB,SAAAR,GAChB,IAAMO,EAAQ,YAAO,EAAKD,MAAMC,UAC1BE,EAAQF,EAASG,QAAQV,GAC/BO,EAASE,GAAT,eAAuBT,GACvBO,EAASE,GAAOL,QAChB,EAAKO,SAAS,CAAEJ,c,EAElBK,aAAe,SAAAZ,GAEb,IAAMO,EAAW,EAAKD,MAAMC,SAASM,QAAO,SAAAC,GAAC,OAAIA,EAAEZ,KAAOF,KAC1D,EAAKW,SAAS,CACZJ,c,EAGJQ,YAAc,WACZ,IAAMR,EAAW,EAAKD,MAAMC,SAASS,KAAI,SAAAF,GAEvC,OADAA,EAAEV,MAAQ,EACHU,KAET,EAAKH,SAAS,CAAEJ,c,wEAER,IAAD,OACP,OACE,6BACE,4BACET,QAASL,KAAKsB,YACd1B,UAAU,8BAFZ,SAMCI,KAAKa,MAAMC,SAASS,KAAI,SAAAhB,GAAO,OAC9B,kBAAC,EAAD,CACED,YAAa,EAAKS,gBAClBP,SAAU,EAAKW,aACfK,IAAKjB,EAAQE,GACbF,QAASA,GAET,wCAAcA,EAAQE,a,GA9CXX,aCaR2B,MAXf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,0BAAM9B,UAAU,aACd,kBAAC,EAAD,SCEY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ebb9e6d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass NavBar extends Component {\n    \n    render() { \n        return ( <nav className=\"navbar navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\n      </nav> );\n    }\n}\n \nexport default NavBar;","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.children}\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-secondary btn-danger btn-sm m-2\">Delete</button>\n        {/* <ul>\n          {this.state.tags.map(tag => (\n            <li key={tag}>{tag}</li>\n          ))}\n        </ul> */}\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n  handleDelete = counter => {\n    //console.log(counter);\n    const counters = this.state.counters.filter(c => c.id !== counter);\n    this.setState({\n      counters\n    });\n  };\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n  render() {\n    return (\n      <div>\n        <button\n          onClick={this.handleReset}\n          className=\"btn btn-primary btn-lg m-2\"\n        >\n          Reset\n        </button>\n        {this.state.counters.map(counter => (\n          <Counter\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            key={counter.id}\n            counter={counter}\n          >\n            <h4>Counter #{counter.id}</h4>\n          </Counter>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n      <main className=\"container\">\n        <Counters />\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}